import streamlit as st
import pandas as pd
import json
import os
import sqlite3
import csv
from agent import query_agent, create_agent

csv_path = "/Users/harjhunj/Downloads/langchain_csv-main/ml_project1_data.csv"

def write_response(response_dict: dict):
    """
    Write a response from an agent to a Streamlit app.

    Args:
        response_dict: The response from the agent.

    Returns:
        None.
    """
    st.write(str(response_dict))

# Local Database for passing SQL query that's generated by the LLM
def query_local_db(sql_query, df):
    """
    df: this is the pandas DF created with the csv provided.
    sql_query: this is the SQL query provided by the LLM, given the prompt.
    """
    # Replacing nulls with 0
    df.fillna(0, inplace=True)
    # Step 3: Create an SQLite database and table
    if os.path.exists('my_database.db'):
        os.remove('my_database.db')
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    # Setup of the SQLITE Database
    sqlite_data_types = {
        "ID": "INTEGER",
        "Year_Birth": "INTEGER",
        "Education": "TEXT",
        "Marital_Status": "TEXT",
        "Income": "INTEGER",
        "Kidhome": "INTEGER",
        "Teenhome": "INTEGER",
        "Dt_Customer":"DATE",
        "Recency": "INTEGER",
        "MntWines": "INTEGER",
        "MntFruits": "INTEGER",
        "MntMeatProducts": "INTEGER",
        "MntFishProducts": "INTEGER",
        "MntSweetProducts": "INTEGER",
        "MntGoldProds": "INTEGER",
        "NumDealsPurchases": "INTEGER",
        "NumWebPurchases": "INTEGER",
        "NumCatalogPurchases": "INTEGER",
        "NumStorePurchases": "INTEGER",
        "NumWebVisitsMonth": "INTEGER",
        "AcceptedCmp3": "INTEGER",
        "AcceptedCmp4": "INTEGER",
        "AcceptedCmp5": "INTEGER",
        "AcceptedCmp1": "INTEGER",
        "AcceptedCmp2": "INTEGER",
        "Complain": "INTEGER",
        "Z_CostContact": "INTEGER",
        "Z_Revenue": "INTEGER",
        "Response": "INTEGER",
    }






    create_table_sql = f'''
        CREATE TABLE IF NOT EXISTS df (
            {', '.join([f"{col} {sqlite_data_types[col]}" for col in df.columns])}
        )
    '''
    cursor.execute(create_table_sql)

    for _, row in df.iterrows():
        values = ', '.join([f"'{row[col]}'" if sqlite_data_types[col] == 'TEXT' else str(row[col]) for col in df.columns])
        insert_sql = f'''
            INSERT INTO df
            VALUES ({values})
        '''
        cursor.execute(insert_sql)

    conn.commit()

    # Step 4: Run SQL queries on the database
    cursor.execute(sql_query)
    results = cursor.fetchall()

    # Step 5: Close the database connection
    conn.close()
    if os.path.exists('my_database.db'):
        os.remove('my_database.db')
    return results

# Streamlit Interface Home Page Styling:
st.title("Chat with your CSV")
query = st.text_area("Insert your query")


if st.button("Submit Query", type="primary"):
    # Create an agent from the CSV file.
    agent = create_agent(csv_path)
    local_db = pd.read_csv(csv_path)
    

    # Query the agent.
    response = query_agent(agent=agent, query=query)

    # Print the LLM output -> the SQL query
    print(response)
    try:
        db_result = query_local_db(response, local_db)
    except:
        db_result = response
    write_response(db_result)


# Example Prompts:
# "find the id with the highest income"
# "Which ID has the highest income? Only consider IDs that have marital_status of single and Education of PhD"
# "what is the count of customers who had number of purchases made with discount greater than 2"
# "what is the count of customers who spent more than 500 on wines and have an education of PhD"